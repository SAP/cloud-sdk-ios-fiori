import FioriThemeManager
import Foundation
import SwiftUI

/// AIUserFeedback display mode
public enum AIUserFeedbackDisplayMode {
    /// AIUserFeedback is pushed in from a navigation stack.
    case push
    /// AIUserFeedback is displayed as a popover on iPad or a sheet on iPhone.
    case sheet
    /// AIUserFeedback is displayed as an inspector.
    /// An inspector can present as a trailing column in a horizontally regular size class, but adapt to a sheet in a horizontally compact size class.
    case inspector
}

/// AIUserFeedback submit state
public enum AIUserFeedbackSubmitState {
    /// Indicates that the submit button is in normal state.
    case normal
    /// Indicates that the submission is in progress.
    case inProgress
    /// Indicates that the submission failed.
    case failed
    /// Indicates that the submission succeed.
    case success
}

/// AIUserFeedback vote state
public enum AIUserFeedbackVoteState {
    /// Indicates that the user has not voted.
    case notDetermined
    /// Indicates that the user up votes the content generated by AI.
    case upVote
    /// Indicates that the user down votes the content generated by AI.
    case downVote
}

// Base Layout style
public struct AIUserFeedbackBaseStyle: AIUserFeedbackStyle {
    @Environment(\.horizontalSizeClass) var horizontalSizeClass
    @Environment(\.dismiss) private var dismiss
    
    @State var submitState: AIUserFeedbackSubmitState = .normal
    @State var voteState: AIUserFeedbackVoteState = .notDetermined
    @State var isUpVoted = false
    @State var isDownVoted = false
    
    /// Indicates if the submit button has been shown.
    /// If the init voteState is `.notDetermined`, the submit button is hidden. When the down vote button is triggered, the submit button is shown.
    /// Then change down vote to up vote, submit button should be shown, too. Once the submit button is shown, it won't be hidden.
    /// Submit button is hidden by default.
    @State var isShowSubmitButton = false
    
    @State private var detentHeight: CGFloat = 0
    @State private var scrollViewHeight: CGFloat = 0
    @State private var detentSelection: PresentationDetent = .medium
    @State private var shouldApplyDetentHeight = true
    
    let navigationBarHeight = UIDevice.current.userInterfaceIdiom != .phone ? 50.0 : 56.0
    
    public func makeBody(_ configuration: AIUserFeedbackConfiguration) -> some View {
        // Add default layout here
        self.mainView(configuration)
            .onAppear {
                self.submitState = .normal
                self.voteState = configuration.voteState
            }
            .onChange(of: self.voteState) {
                self.isUpVoted = self.voteState == .upVote
                self.isDownVoted = self.voteState == .downVote
                if self.isDownVoted {
                    self.isShowSubmitButton = true
                }
                self.shouldApplyDetentHeight = true
            }
            .ifApply(configuration.displayMode != .push && UIDevice.current.userInterfaceIdiom != .pad, content: { v in
                v.presentationDragIndicator(.visible)
                    .presentationBackgroundInteraction(configuration.isBackgroundInteractionEnabled ? self.backgroundInteractionPresentationDetent() : .automatic)
                    .presentationDetents([.height(self.detentHeight + self.navigationBarHeight), .height(213.0), .medium, .large], selection: self.$detentSelection)
            })
            .ifApply(UIDevice.current.userInterfaceIdiom == .pad) { v in
                v.presentationDragIndicator(.hidden)
                    .presentationDetents([.height(self.detentHeight + self.navigationBarHeight)])
                    .frame(idealHeight: self.detentHeight + self.navigationBarHeight)
            }
    }
    
    func additionalHeightInVertical(_ configuration: AIUserFeedbackConfiguration) -> CGFloat {
        (self.isCompactStyle(configuration) ? 10 : 0) + 16 + 16
    }
    
    func isCompactStyle(_ configuration: AIUserFeedbackConfiguration) -> Bool {
        UIDevice.current.userInterfaceIdiom == .phone || configuration.displayMode == .inspector
    }
    
    @ViewBuilder
    func mainView(_ configuration: AIUserFeedbackConfiguration) -> some View {
        if configuration.displayMode == .push || configuration.displayMode == .inspector {
            self.contentView(configuration)
        } else {
            NavigationStack {
                self.contentView(configuration)
            }
        }
    }

    func contentView(_ configuration: AIUserFeedbackConfiguration) -> some View {
        ZStack {
            ScrollView {
                if self.submitState == .failed {
                    self.defaultErrorView(configuration)
                        .padding(.top, 20)
                        .padding(.bottom, 16)
                        .fixedSize(horizontal: false, vertical: true)
                        .background(
                            GeometryReader { proxy in
                                Color.clear
                                    .onAppear {
                                        self.detentHeight = proxy.size.height
                                        self.detentSelection = .height(self.detentHeight + self.navigationBarHeight)
                                    }
                            }
                        )
                        .frame(minHeight: self.scrollViewHeight)
                } else {
                    VStack {
                        VStack {
                            self.illustratedMessage(configuration)
                            
                            if self.isDownVoted {
                                self.feedbackDetailView(configuration)
                            }
                            
                            if self.isShowSubmitButton {
                                self.submitButton(configuration)
                                    .onSimultaneousTapGesture {
                                        self.onSubmitAction(configuration)
                                    }
                                    .disabled(self.submitState == .inProgress)
                            }
                        }
                        .background(GeometryReader { geometry in
                            Color.clear
                                .onAppear {
                                    self.detentHeight = geometry.size.height + self.additionalHeightInVertical(configuration)
                                    self.detentSelection = .height(self.detentHeight + self.navigationBarHeight)
                                }
                                .onChange(of: geometry.size.height) {
                                    if self.shouldApplyDetentHeight {
                                        self.detentHeight = geometry.size.height + self.additionalHeightInVertical(configuration)
                                        self.detentSelection = .height(self.detentHeight + self.navigationBarHeight)
                                        self.shouldApplyDetentHeight = false
                                    }
                                }
                        })
                        .padding([.top, .bottom], 16)
                    }
                    .frame(minHeight: (UIDevice.current.userInterfaceIdiom == .phone || configuration.displayMode != .inspector) ? self.scrollViewHeight - (self.isCompactStyle(configuration) ? 10 : 0) : nil)
                    .padding([.leading, .trailing], self.isCompactStyle(configuration) ? 16 : 0)
                    .background(Color.preferredColor(.secondaryGroupedBackground))
                    .clipShape(RoundedRectangle(cornerRadius: self.isCompactStyle(configuration) ? 13 : 0))
                    .padding(.top, self.isCompactStyle(configuration) ? 10 : 0)
                    .padding([.leading, .trailing], self.isCompactStyle(configuration) ? 16 : 20)
                }
            }
            .defaultScrollAnchor(.top)
        }
        .background(GeometryReader { geometry in
            Color.clear
                .onAppear {
                    self.scrollViewHeight = geometry.size.height
                }
                .onChange(of: geometry.size.height) {
                    self.scrollViewHeight = geometry.size.height
                }
        })
        .frame(maxWidth: (configuration.displayMode != .push && UIDevice.current.userInterfaceIdiom != .phone) ? 393.0 : .infinity, maxHeight: .infinity)
        .toolbarBackground(self.isCompactStyle(configuration) ? .visible : .automatic, for: .navigationBar)
        .toolbarBackground(Color.preferredColor(.chromeSecondary), for: .navigationBar)
        .ifApply(self.isCompactStyle(configuration), content: { v in
            v.background(Color.preferredColor(.primaryGroupedBackground))
        })
        .navigationBarTitleDisplayMode(.inline)
        .navigationTitle(String(configuration.navigationTitle?.characters ?? AttributedString("").characters))
        .navigationBarBackButtonHidden(true)
        .toolbar {
            self.toolBarContent(configuration)
        }
    }
    
    @ViewBuilder
    func illustratedMessage(_ configuration: AIUserFeedbackConfiguration) -> some View {
        configuration._illustratedMessage
            .detailImageStyle(content: { _ in
                EmptyView()
            })
            .actionStyle(content: { _ in
                self.actionView(configuration)
                    .fioriButtonStyle(FioriTertiaryButtonStyle())
            })
            .secondaryActionStyle(content: { _ in
                self.secondaryActionView(configuration)
                    .fioriButtonStyle(FioriTertiaryButtonStyle())
            })
            .fixedSize(horizontal: false, vertical: true)
            .padding(.bottom, 11)
    }
    
    @ViewBuilder
    func feedbackDetailView(_ configuration: AIUserFeedbackConfiguration) -> some View {
        if configuration.filterFormView != nil {
            configuration.filterFormView
                .padding(.bottom, 15)
        }
        if configuration.keyValueFormView != nil {
            configuration.keyValueFormView
        }
    }
    
    @ViewBuilder
    func actionView(_ configuration: AIUserFeedbackConfiguration) -> some View {
        if configuration.action.isEmpty {
            DownVoteAction()
                .downVoteActionStyle(DownVoteButtonSelectedStyle(isSelected: self.isDownVoted))
                .onSimultaneousTapGesture {
                    self.voteState = .downVote
                    self.isShowSubmitButton = true
                    configuration.onDownVote?()
                }
                .accessibilityLabel(self.accessibilityLabel(label: "Negative feedback".localizedFioriString(), selected: self.isDownVoted))
        } else {
            configuration.action
                .onSimultaneousTapGesture {
                    self.voteState = .downVote
                    self.isShowSubmitButton = true
                    configuration.onDownVote?()
                }
        }
    }
    
    @ViewBuilder
    func secondaryActionView(_ configuration: AIUserFeedbackConfiguration) -> some View {
        if configuration.secondaryAction.isEmpty {
            UpVoteAction()
                .upVoteActionStyle(UpVoteButtonSelectedStyle(isSelected: self.isUpVoted))
                .onSimultaneousTapGesture {
                    self.voteState = .upVote
                    configuration.onUpVote?()
                    if self.isShowSubmitButton == false {
                        self.onSubmitAction(configuration)
                    }
                }
                .accessibilityLabel(self.accessibilityLabel(label: "Positive feedback".localizedFioriString(), selected: self.isUpVoted))
        } else {
            configuration.secondaryAction
                .onSimultaneousTapGesture {
                    self.voteState = .upVote
                    configuration.onUpVote?()
                }
        }
    }
    
    @ViewBuilder
    func submitButton(_ configuration: AIUserFeedbackConfiguration) -> some View {
        if configuration.submitAction.isEmpty {
            if self.submitState == .inProgress {
                FioriButton { _ in Text("Loading...".localizedFioriString()) }
                    .fioriButtonStyle(FioriSecondaryButtonStyle(maxWidth: .infinity, loadingState: .processing))
            } else {
                FioriButton { _ in Text("Submit".localizedFioriString()) }
                    .fioriButtonStyle(FioriSecondaryButtonStyle(maxWidth: .infinity, loadingState: .unspecified))
            }
        } else {
            configuration.submitAction
        }
    }
    
    @ToolbarContentBuilder
    func toolBarContent(_ configuration: AIUserFeedbackConfiguration) -> some ToolbarContent {
        if configuration.displayMode == .push || self.submitState == .failed {
            ToolbarItem(placement: .topBarLeading) {
                FioriButton { _ in
                    HStack {
                        Image(systemName: "chevron.backward")
                        Text("Back".localizedFioriString())
                            .font(.fiori(forTextStyle: .body, weight: .semibold))
                    }
                }
                .fioriButtonStyle(AIUserFeedbackToolbarItemStyle())
                .onSimultaneousTapGesture {
                    if self.submitState == .failed {
                        self.submitState = .normal
                    } else {
                        configuration.onCancel?()
                        self.dismiss()
                    }
                }
            }
        } else {
            ToolbarItem(placement: .topBarLeading) {
                configuration.cancelAction
                    .fioriButtonStyle(AIUserFeedbackToolbarItemStyle())
                    .onSimultaneousTapGesture {
                        configuration.onCancel?()
                        if configuration.displayMode != .inspector {
                            self.dismiss()
                        }
                    }
            }
        }
    }
    
    func defaultErrorView(_ configuration: AIUserFeedbackConfiguration) -> some View {
        if configuration.errorView.isEmpty {
            return IllustratedMessage(detailImage: {
                Image(fioriName: "fiori.ill.simple.connection.spot")
                    .resizable()
                    .aspectRatio(contentMode: .fit)
            }, title: {
                Text("Submission failed".localizedFioriString())
            }, description: {
                Text("Your feedback was not submitted due to a connection error. Please try again.".localizedFioriString())
                    .foregroundStyle(Color.preferredColor(.secondaryLabel))
                    .font(.fiori(forTextStyle: .subheadline))
            }, action: {
                if self.submitState == .inProgress {
                    FioriButton { _ in Text("Loading...".localizedFioriString()) }
                        .fioriButtonStyle(FioriSecondaryButtonStyle(maxWidth: .infinity, loadingState: .processing).eraseToAnyFioriButtonStyle())
                } else {
                    FioriButton { _ in
                        self.onSubmitAction(configuration)
                    } label: { _ in
                        Text("Retry".localizedFioriString())
                    }
                    .fioriButtonStyle(FioriPrimaryButtonStyle(.infinity, minHeight: 44, loadingState: .unspecified).eraseToAnyFioriButtonStyle())
                }
            }, secondaryAction: {
                FioriButton { _ in
                    configuration.onCancel?()
                } label: { _ in
                    Text("Cancel".localizedFioriString())
                }
                .fioriButtonStyle(FioriSecondaryButtonStyle(colorStyle: .negative, maxWidth: .infinity, minHeight: 44).eraseToAnyFioriButtonStyle())
            }, isActionVerticallyAligned: false,
            contentAlignment: .leading)
                .titleStyle(content: { titleConfig in
                    titleConfig.title
                        .foregroundStyle(Color.preferredColor(.primaryLabel))
                        .font(.fiori(forTextStyle: .headline, weight: .bold))
                }).typeErased
        }
        
        return configuration.errorView.typeErased
    }
    
    func getSelectedOptions(_ configuration: AIUserFeedbackConfiguration) -> [String] {
        let options = configuration.filterFormView?.options ?? []
        let values = configuration.filterFormView?.value ?? []
        let selectedOptions = options.indices.filter(values.contains).map { String(options[$0].characters) }
        return selectedOptions
    }
    
    func backgroundInteractionPresentationDetent() -> PresentationBackgroundInteraction {
        if self.detentHeight + self.navigationBarHeight < self.mediumPresentationDetentHeight() {
            return PresentationBackgroundInteraction.enabled(upThrough: .medium)
        }
        
        return PresentationBackgroundInteraction.enabled(upThrough: PresentationDetent.height(self.detentHeight + self.navigationBarHeight))
    }
    
    /// PresentationDetent.medium is approximately half the height of the screen.
    /// Compare custom height to this height.
    /// - Returns: The approximately height of half screen.
    func mediumPresentationDetentHeight() -> CGFloat {
        Screen.bounds.size.height / 2
    }
    
    /// PresentationDetent.large is approximately the height of the full screen.
    /// - Returns: The approximately presentation detent height of large screen.
    func largePresentationDetentHeight() -> CGFloat {
        Screen.bounds.size.height - UIEdgeInsets.getSafeAreaInsets().top - 30.0
    }
    
    private func accessibilityLabel(label: String, selected: Bool) -> String {
        var accLabel = selected ? "selected".localizedFioriString() : "enabled".localizedFioriString()
        accLabel += ", " + label
        return accLabel
    }
    
    private func onSubmitAction(_ configuration: AIUserFeedbackConfiguration) {
        configuration.onSubmit?(self.voteState, self.getSelectedOptions(configuration), configuration.keyValueFormView?.text ?? "", { submitStateValue in
            self.submitState = submitStateValue
        })
    }
}

// Default fiori styles
extension AIUserFeedbackFioriStyle {
    struct ContentFioriStyle: AIUserFeedbackStyle {
        func makeBody(_ configuration: AIUserFeedbackConfiguration) -> some View {
            AIUserFeedback(configuration)
        }
    }

    struct DetailImageFioriStyle: DetailImageStyle {
        let aIUserFeedbackConfiguration: AIUserFeedbackConfiguration

        func makeBody(_ configuration: DetailImageConfiguration) -> some View {
            DetailImage(configuration)
        }
    }

    struct TitleFioriStyle: TitleStyle {
        let aIUserFeedbackConfiguration: AIUserFeedbackConfiguration

        func makeBody(_ configuration: TitleConfiguration) -> some View {
            if configuration.isDirectChild(self.aIUserFeedbackConfiguration.componentIdentifier) {
                Title(configuration)
                    .foregroundStyle(Color.preferredColor(.primaryLabel))
                    .font(.fiori(forTextStyle: .headline, weight: .bold))
                    .typeErased
            } else {
                Title(configuration).typeErased
            }
        }
    }

    struct DescriptionFioriStyle: DescriptionStyle {
        let aIUserFeedbackConfiguration: AIUserFeedbackConfiguration

        func makeBody(_ configuration: DescriptionConfiguration) -> some View {
            Description(configuration)
                .foregroundStyle(Color.preferredColor(.secondaryLabel))
                .font(.fiori(forTextStyle: .subheadline))
        }
    }

    struct ActionFioriStyle: ActionStyle {
        let aIUserFeedbackConfiguration: AIUserFeedbackConfiguration

        func makeBody(_ configuration: ActionConfiguration) -> some View {
            Action(configuration)
        }
    }

    struct SecondaryActionFioriStyle: SecondaryActionStyle {
        let aIUserFeedbackConfiguration: AIUserFeedbackConfiguration

        func makeBody(_ configuration: SecondaryActionConfiguration) -> some View {
            SecondaryAction(configuration)
        }
    }

    struct SubmitActionFioriStyle: SubmitActionStyle {
        let aIUserFeedbackConfiguration: AIUserFeedbackConfiguration

        func makeBody(_ configuration: SubmitActionConfiguration) -> some View {
            SubmitAction(configuration)
        }
    }

    struct CancelActionFioriStyle: CancelActionStyle {
        let aIUserFeedbackConfiguration: AIUserFeedbackConfiguration

        func makeBody(_ configuration: CancelActionConfiguration) -> some View {
            CancelAction(configuration)
        }
    }

    struct IllustratedMessageFioriStyle: IllustratedMessageStyle {
        let aIUserFeedbackConfiguration: AIUserFeedbackConfiguration

        func makeBody(_ configuration: IllustratedMessageConfiguration) -> some View {
            IllustratedMessage(configuration)
        }
    }
}

private struct AIUserFeedbackToolbarItemStyle: FioriButtonStyle {
    func makeBody(configuration: FioriButtonStyle.Configuration) -> some View {
        let foregroundColor: Color
        switch configuration.state {
        case .normal:
            foregroundColor = Color.preferredColor(.tintColor)
        case .highlighted, .selected:
            foregroundColor = Color.preferredColor(.tintColorTapState)
        default:
            foregroundColor = Color.preferredColor(.separator)
        }
        
        let config = FioriButtonConfiguration(foregroundColor: foregroundColor, backgroundColor: Color.clear, font: .fiori(forTextStyle: .body, weight: .semibold), padding: EdgeInsets(top: 0, leading: 0, bottom: 0, trailing: 0))
        
        return configuration.label
            .fioriButtonConfiguration(config)
    }
}

// private extension View {
//    func onSimultaneousTapGesture(perform action: @escaping () -> Void) -> some View {
//        simultaneousGesture(TapGesture(count: 1).onEnded {
//            action()
//        }, including: .all)
//    }
// }
