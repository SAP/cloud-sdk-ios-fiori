name: PR

on:
  pull_request:
    types: [opened, synchronize]

jobs:

  build:
    runs-on: macos-latest
    env:
      DEVELOPER_DIR: /Applications/Xcode_12.2.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Build and Test on iOS 14 with Xcode 12
        run: set -o pipefail && xcodebuild -enableCodeCoverage YES -scheme FioriSwiftUI-Package -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11' clean build test | xcpretty

  swift-api-assign-reviewer:
    runs-on: ubuntu-latest
    steps:
      - uses: MarcoEidinger/swift-api-assign-reviewer@1.0.0
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: ".github/configActions/swift-api-assign-reviewer.yml"

  conventionalcommit-verification:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v1
        with:
            configFile: '.github/configActions/commitlint.config.js'

  ReuseComplianceCheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v1.1

  CodeFormattingCheck:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Mint packages
        id: mint-cache
        uses: actions/cache@v2
        with:
          path: /usr/local/lib/mint
          key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
          restore-keys: ${{ runner.os }}-mint-
      - name: Install Mint
        run: |
          brew upgrade mint || brew install mint || true
      - name: Install swiftformat via mint
        if: steps.mint-cache.outputs.cache-hit != 'true'
        run: mint bootstrap
      - name: Format Swift code
        run: mint run swiftformat --verbose .
      - name: Verify formatted code is unchanged
        run: git diff --exit-code HEAD

# Disable snapshot testing until Example's app unit test target can be build again (https://bugs.swift.org/browse/SR-13739)
  # SnapshotTests:
  #   runs-on: macos-latest
  #   env:
  #     DEVELOPER_DIR: /Applications/Xcode_12.2.app/Contents/Developer
  #   steps:
  #   - name: Checkout Repo
  #     uses: actions/checkout@v2
  #   - name: Check for file changes in Sources folder
  #     uses: getsentry/paths-filter@v2
  #     id: changes
  #     with:
  #       filters: |
  #         src:
  #           - 'Sources/**'
  #   - name: Checkout Snapshot references
  #     uses: actions/checkout@v2
  #     if: steps.changes.outputs.src == 'true'
  #     with:
  #       repository: SAP/cloud-sdk-ios-fiori-snapshot-references
  #       path: Apps/Examples/cloud-sdk-ios-fiori-snapshot-references
  #   - name: Install xcbeautify tool
  #     if: steps.changes.outputs.src == 'true'
  #     run:  |
  #       brew tap thii/xcbeautify https://github.com/thii/xcbeautify.git
  #       brew install swiftlint xcbeautify
  #   - name: Build Package
  #     if: steps.changes.outputs.src == 'true'
  #     run: set -o pipefail && xcodebuild -scheme FioriSwiftUI-Package -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11' build | xcbeautify
  #   - name: Run snapshot tests
  #     if: steps.changes.outputs.src == 'true'
  #     run: set -o pipefail && xcodebuild -project ./Apps/Examples/Examples.xcodeproj -scheme ExamplesTests -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone SE (2nd generation)' test | xcbeautify
  #   - name: Collect screenshot results on failure
  #     if: failure()
  #     run:  |
  #       brew install chargepoint/xcparse/xcparse
  #       ./scripts/snapshottesting/parseXcresult.sh
  #   - name: Upload screenshot results on failure
  #     if: failure()
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: SnapshotTestResultImages
  #       path: ./SnapshotTestResultImages

