{# Utility function which returns the correct Style struct, for the unwrapped (non-optional) var type #}
{% macro _StyleType unwrappedTypeName %}
{% if unwrappedTypeName == "String" or unwrappedTypeName == "[String]" or unwrappedTypeName == "Binding<String>" or unwrappedTypeName == "NSAttributedString" %}
TextStyle
{% elif unwrappedTypeName == "Image" %}
ImageStyle
{% else %}
NothingStyle
{% endif %}
{% endmacro %}

{% macro StyleType unwrappedTypeName %}{% set tmp %}{% call _StyleType unwrappedTypeName %}{% endset %}{{tmp|removeNewlines}}{% endmacro %}
// sourcery:file:EnvironmentValues+Styles.generated.swift
import SwiftUI
{% for type in types.implementing._ComponentGenerating %}

extension EnvironmentValues {
{% for variable in type.variables where variable|!annotated:"no_view" and variable|!annotated:"no_style" %}
{% set NAME %}{{ variable.name|replace:'_','' }}{% endset %}
{% set keyname %}{{NAME | upperFirstLetter }}StyleKey{% endset %}
{% set AStyle %}{% call StyleType variable.typeName.unwrappedTypeName %}{% endset %}
{#
    public var {{NAME}}Style: {{AStyle}} {
        get { return self[{{keyname}}.self] }
        set { self[{{keyname}}.self] = newValue }
    }
#}

    public var {{NAME}}Modifier: AnyViewModifier {
        get { return self[{{NAME | upperFirstLetter }}ModifierKey.self] }
        set { self[{{NAME | upperFirstLetter }}ModifierKey.self] = newValue }
    }

{% endfor %}
}

public extension View {
{% for variable in type.variables where variable|!annotated:"no_view" and variable|!annotated:"no_style" %}
{% set NAME %}{{ variable.name|replace:'_','' }}{% endset %}
{% set AStyle %}{% call StyleType variable.typeName.unwrappedTypeName %}{% endset %}

{#
    @ViewBuilder
    func {{NAME}}Style(_ style: {{AStyle}}, concat: Bool = true) -> some View {
        if concat {
            transformEnvironment(\.{{NAME}}Style) { $0 = $0.merging(style) }
        } else {
            environment(\.{{NAME}}Style, style)
        }
    }
#}

    @ViewBuilder
    func {{NAME}}Modifier<V: View>(_ transform: @escaping (AnyViewModifier.Content) -> V) -> some View {
        self.environment(\.{{NAME}}Modifier, AnyViewModifier(transform))
    }

{#
	func {{NAME}}StyleClass(_ class: String, concat: Bool = true) -> some View {
        self.{{NAME}}StyleClass([`class`], concat: concat)
    }

    func {{NAME}}StyleClass(_ classPath: [String], concat: Bool = true) -> some View {
        return transformEnvironment(\.{{NAME}}Modifier) {
            switch StyleCache.shared.resolveModifier(for: classPath) {
                case .success(let resolved):
                    if concat {
                        let copy = $0; $0 = AnyViewModifier({ content in content.modifier(resolved.concat(copy)) })
                    } else {
                        $0 = resolved
                    }
                case .failure(_):  break
            }
        }
    }
	#}
{% endfor %}
}

{% endfor %}


{% for type in types.implementing._ComponentMultiPropGenerating %}

	{% if type.annotations.availableAttributeContent %}@available({{ type.annotations.availableAttributeContent }}){% endif %}
	extension EnvironmentValues {
	{% for variable in type.variables where variable|!annotated:"no_view" and variable|!annotated:"no_style" %}
	{% set NAME %}{{ variable.name|replace:'_','' }}{% endset %}
	{% set keyname %}{{NAME | upperFirstLetter }}StyleKey{% endset %}
	{% set AStyle %}{% call StyleType variable.typeName.unwrappedTypeName %}{% endset %}
		{#
		public var {{NAME}}Style: {{AStyle}} {
			get { return self[{{keyname}}.self] }
			set { self[{{keyname}}.self] = newValue }
		}
		#}

		public var {{NAME}}Modifier: AnyViewModifier {
			get { return self[{{NAME | upperFirstLetter }}ModifierKey.self] }
			set { self[{{NAME | upperFirstLetter }}ModifierKey.self] = newValue }
		}

	{% endfor %}
	}

	{% if type.annotations.availableAttributeContent %}@available({{ type.annotations.availableAttributeContent }}){% endif %}
	public extension View {
	{% for variable in type.variables where variable|!annotated:"no_view" and variable|!annotated:"no_style" %}
	{% set NAME %}{{ variable.name|replace:'_','' }}{% endset %}
	{% set AStyle %}{% call StyleType variable.typeName.unwrappedTypeName %}{% endset %}

		{#
		@ViewBuilder
		func {{NAME}}Style(_ style: {{AStyle}}, concat: Bool = true) -> some View {
			if concat {
				transformEnvironment(\.{{NAME}}Style) { $0 = $0.merging(style) }
			} else {
				environment(\.{{NAME}}Style, style)
			}
		}
		#}

		@ViewBuilder
		func {{NAME}}Modifier<V: View>(_ transform: @escaping (AnyViewModifier.Content) -> V) -> some View {
			self.environment(\.{{NAME}}Modifier, AnyViewModifier(transform))
		}

		{#
		func {{NAME}}StyleClass(_ class: String, concat: Bool = true) -> some View {
			self.{{NAME}}StyleClass([`class`], concat: concat)
		}

		func {{NAME}}StyleClass(_ classPath: [String], concat: Bool = true) -> some View {
			return transformEnvironment(\.{{NAME}}Modifier) {
				switch StyleCache.shared.resolveModifier(for: classPath) {
					case .success(let resolved):
						if concat {
							let copy = $0; $0 = AnyViewModifier({ content in content.modifier(resolved.concat(copy)) })
						} else {
							$0 = resolved
						}
					case .failure(_):  break
				}
			}
		}
		#}
	{% endfor %}
	}

	{% endfor %}
// sourcery:end
