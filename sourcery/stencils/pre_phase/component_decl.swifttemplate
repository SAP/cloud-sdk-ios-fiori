<%_ 
import FioriSwiftUICore 

extension Variable {
    var swiftUITypeName: String {
        switch self.typeName.unwrappedTypeName {
        case "String", "[String]":
            return "Text"
        case "Image":
            return "Image"
        default:
            return "Never"
        }
    }

    var trimmedName: String {
        name.replacingOccurrences(of: "_", with: "")
    }

    var DELETE_combineTest: Bool {
        let _ = Just(5)
        .map { "a value of \($0)" }
        .sink { receivedValue in 
            print("the end result was: \(receivedValue)")
        }
        return true
    }
}
extension Type {
    var componentName: String {
        name.replacingOccurrences(of: "Model", with: "")
    }

    var componentNameAsPropertyDecl: String {
        componentName.lowercasingFirst()
    }

    var componentProperties: Array<Variable> {
        inheritedTypes.compactMap({ type[$0] }).flatMap({ $0.allVariables })
    }
}

let models = types.implementing["_ComponentGenerating"]

for model in models {

    let componentProperties = model.componentProperties
    let styleName = model.componentStyleName

    for property in componentProperties {
        let propertyName = property.trimmedName
-%>
public protocol <%= propertyName %>Component {
    var <%= property.name %>: <%= property.typeName %> { get }
}
<%_ 
    }
  
-%>
// sourcery:file:Component+Protocols.generated.swift
import SwiftUI
// sourcery:end
