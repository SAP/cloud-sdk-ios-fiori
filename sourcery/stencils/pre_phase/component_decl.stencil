{# Utility function which returns the correct Style struct, for the unwrapped (non-optional) var type #}
{% macro _StyleType unwrappedTypeName %}
{% if unwrappedTypeName == "String" or unwrappedTypeName == "[String]" %}
TextStyle
{% elif unwrappedTypeName == "Data" %}
ImageStyle
{% else %}
NothingStyle
{% endif %}
{% endmacro %}

{% macro StyleType unwrappedTypeName %}{% set tmp %}{% call _StyleType unwrappedTypeName %}{% endset %}{{tmp|removeNewlines}}{% endmacro %}
// sourcery:file:Component+Protocols.generated.swift
import SwiftUI
{% for type in types.implementing._ComponentGenerating %}

{% for variable in type.variables where variable %}
{% set NAME %}{{ variable.name|replace:'_','' }}{% endset %}

public protocol {{NAME | upperFirstLetter}}Component {
{% for key,value in variable.annotations %}
{% if value == 1 %}
    // sourcery: {{key}}
{% else %}
    // sourcery: {{key}}={{value}}
{% endif %}
{% endfor %}
    var {{variable.name}}: {{variable.typeName}} { get }
}
{% endfor %}
{% endfor %}

{% for type in types.implementing._ComponentMultiPropGenerating %}
{% set NAME %}{{ type.name|replace:'_','' }}{% endset %}
public protocol {{NAME | upperFirstLetter}}Component {
{% for variable in type.variables where variable %}
{% for key,value in variable.annotations %}
{% if value == 1 %}
	// sourcery: {{key}}
{% else %}
	// sourcery: {{key}}={{value}}
{% endif %}
{% endfor %}
	var {{variable.name}}: {{variable.typeName}} { get }
{% endfor %}
{% for method in type.methods where method %}
	func {{method.name}} -> {{method.returnTypeName}}
{% endfor %}
}
{% endfor %}
// sourcery:end
