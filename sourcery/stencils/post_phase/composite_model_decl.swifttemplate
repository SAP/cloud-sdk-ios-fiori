<%- includeFile("../../.lib/Sources/utils/Array+String.swift") -%>
<%- includeFile("../../.lib/Sources/utils/Array+Variable.swift") -%>
<%- includeFile("../../.lib/Sources/utils/cloud_sdk_ios_sourcery_utils.swift") -%>
<%- includeFile("../../.lib/Sources/utils/String+Extensions.swift") -%>
<%- includeFile("../../.lib/Sources/utils/Type+Extensions.swift") -%>
<%- includeFile("../../.lib/Sources/utils/Variable+Extensions.swift") -%>
<%- includeFile("../../.lib/Sources/utils/swift-algorithms-copy/Combinations.swift") -%>
<%_

let models = types.protocols.filter({ $0.annotations["generated_component_composite"] != nil })

for model in models {

    let closureProperties = model.closureProperties(contextType: type)

    let componentProperties = model.flattenedComponentProperties(contextType: type)
    let styleName = model.componentStyleName

    let templateParameterDecls = [
        componentProperties.templateParameterDecls,
        model.add_view_builder_paramsTemplateParameterDecls
    ].flatMap { $0 }.joined(separator: ", ")

    let environmentPropertyDecls = [
        componentProperties.viewModifierPropertyDecls,
        model.add_env_propsDecls
    ].flatMap { $0 }.joined(separator: "\n\t")

    let privatePropertyDecls = [
        componentProperties.viewBuilderPropertyDecls,
        model.add_view_builder_paramsViewBuilderPropertyDecls
    ].flatMap { $0 }.joined(separator: "\n\t")

	let virtualPropertyDecls = model.virtualPropertyDecls.joined(separator: "\n\t")

    let viewBuilderInitParams = [
        componentProperties.viewBuilderInitParams,
        model.add_view_builder_paramsViewBuilderInitParams
    ].flatMap { $0 }.joined(separator: ",\n\t\t")

    let viewBuilderInitParamAssignment = [
        componentProperties.viewBuilderInitParamAssignment,
        model.add_view_builder_paramsViewBuilderInitParamAssignment
    ].flatMap { $0 }.joined(separator: "\n\t\t\t")

    let extensionModelInitParams = [
        componentProperties.extensionModelInitParams,
		closureProperties.extensionModelInitClosureParams,
        model.add_view_builder_paramsViewBuilderInitParams
    ].flatMap { $0 }.joined(separator: ", ")

    let extensionModelInitParamsChaining = [
        componentProperties.extensionModelInitParamsChaining,
		closureProperties.extensionModelInitClosureParamsChaining,
        model.add_view_builder_paramsExtensionModelInitParamsChaining
    ].flatMap { $0 }.joined(separator: ", ")

    let extensionModelInitParamsAssignments = [
        model.extensionModelInitParamsAssignments(contextType: type, allTypes: types),
        model.add_view_builder_paramsViewBuilderInitParamAssignment
    ].flatMap { $0 }.joined(separator: "\n\t\t")

    let modelInitParam: String = "model: \(model.name)"

    let modelInitParams = [
        [modelInitParam],
        model.add_view_builder_paramsViewBuilderInitParams
    ].flatMap { $0 }.joined(separator: ", ")

  func optionalPropertySequences(_ t: Type) -> [[Variable]] {
      var sequences: [[Variable]] = []
      let optionalProperties = t.allVariables.filter({ $0.isOptional })
      guard optionalProperties.count > 0 else { return [] }
      for i in 1..<optionalProperties.count {
          sequences.append(contentsOf: optionalProperties.combinations(ofCount: i).map({ $0 }))
      }
      return sequences
  }

  let combinationsOfOptionals = optionalPropertySequences(model).map({ $0 })

  -%>
// sourcery:file:ViewModels/API/<%= model.componentName %>+API.generated.swift
import SwiftUI

public struct <%= model.componentName %><<%= templateParameterDecls %>> {
    <%= environmentPropertyDecls %>

    <%= privatePropertyDecls %>
	<% if !virtualPropertyDecls.isEmpty { -%><%= virtualPropertyDecls %><% } %>

    public init(
        <%= viewBuilderInitParams %>
        ) {
            <%= viewBuilderInitParamAssignment  %>
    }

    <%= componentProperties.resolvedViewModifierChain(type: model) %>
    <%= model.add_view_builder_paramsResolvedViewModifierChain.joined(separator: "\n\t") %>
}

extension <%= model.componentName %> where <%= componentProperties.extensionConstrainedWhereConditionalContent %> {

    public init(<%= modelInitParams %>) {
        self.init(<%= extensionModelInitParamsChaining %>)
    }

    public init(<%= extensionModelInitParams %>) {
        <%= extensionModelInitParamsAssignments %>
    }
}

// sourcery:end

// sourcery:file:ViewModels/Boilerplate/<%= model.componentName %>+View.generated.swift
//TODO: Copy commented code to new file: `FioriSwiftUICore/Views/<%= model.componentName %>+View.swift`
//TODO: Implement default Fiori style definitions as `ViewModifier`
//TODO: Implement <%= model.componentName %> `View` body

/// - Important: to make `@Environment` properties (e.g. `horizontalSizeClass`), internally accessible
/// to extensions, add as sourcery annotation in `FioriSwiftUICore/Models/ModelDefinitions.swift`
/// to declare a wrapped property
/// e.g.:  `// sourcery: add_env_props = ["horizontalSizeClass"]`

/*
import SwiftUI

// FIXME: - Implement Fiori style definitions

<%= model.fioriStyleImplEnumDecl(componentProperties: componentProperties) %>

// FIXME: - Implement <%= model.componentName %> View body

extension <%= model.componentName %>: View {
    public var body: some View {
        <# View body #>
    }
}
*/
// sourcery:end

// sourcery:file:ViewModels/Init+Extensions/<%= model.componentName %>+Init.generated.swift
import SwiftUI
<%_
    for optionalCombination in combinationsOfOptionals {

        let extensionInitParamWhereEmptyView = [
            componentProperties.extensionInitParamWhereEmptyView(scenario: optionalCombination),
            model.add_view_builder_paramsViewBuilderInitParams
        ].flatMap { $0 }.joined(separator: ",\n\t\t")

        let extensionInitParamAssignmentWhereEmptyView = [
            componentProperties.extensionInitParamAssignmentWhereEmptyView(scenario: optionalCombination),
            model.add_view_builder_paramsExtensionModelInitParamsChaining
        ].flatMap { $0 }.joined(separator: ",\n\t\t\t")
-%>

extension <%= model.componentName %> where <%= optionalCombination.extensionContrainedWhereEmptyView %> {
    public init(
    <%= extensionInitParamWhereEmptyView %>
    ) {
        self.init(
            <%= extensionInitParamAssignmentWhereEmptyView %>
        )
    }
}
<%_ } -%>

// sourcery:end
<%_ } -%>
